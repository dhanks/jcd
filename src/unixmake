#!/bin/sh
# Jade Coiled Dragon - a multi-user, multi-tasking chat environment
# Copyright (C) 2000 Douglas R. Hanks Jr.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

BOLD=`cat .bold`
NOR=`cat .nor`
echo "$BOLD Working System Architecture $NOR"
UNAME_MACHINE=`uname -m`
echo " Machine:	$UNAME_MACHINE"
UNAME_NODE=`uname -n`
echo " Node:		$UNAME_NODE"
UNAME_RELEASE=`uname -r`
echo " Release:	$UNAME_RELEASE"
UNAME_OS=`uname -s`
echo " OS:		$UNAME_OS"
UNAME_PROCESSOR=`uname -p`
echo " Processor:	$UNAME_PROCESSOR"

echo "$BOLD Working System Data Types $NOR"
cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(int));
}
EOF
gcc conftest.c -o conftest
INT_SIZE=`./conftest`
echo " int ..		$((INT_SIZE<<3)) bit"

cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(char));
}
EOF
gcc conftest.c -o conftest
CHAR_SIZE=`./conftest`
echo " char ..	$((CHAR_SIZE<<3)) bit"

cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(long));
}
EOF
gcc conftest.c -o conftest
LONG_SIZE=`./conftest`
echo " long ..	$((LONG_SIZE<<3)) bit"

cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(short));
}
EOF
gcc conftest.c -o conftest
SHORT_SIZE=`./conftest`
echo " short ..	$((SHORT_SIZE<<3)) bit"

cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(double));
}
EOF
gcc conftest.c -o conftest
DOUBLE_SIZE=`./conftest`
echo " double ..	$((DOUBLE_SIZE<<3)) bit"

cat > conftest.c <<EOF
#include <stdio.h>

int main(int argc, char **argv)
{
	printf("%i", sizeof(float));
}
EOF
gcc conftest.c -o conftest
FLOAT_SIZE=`./conftest`
echo " float ..	$((FLOAT_SIZE<<3)) bit"

cat ../headers/header.c > ../include/prototypes.h
cat >> ../include/prototypes.h <<EOF
#if !defined(PROTOTYPES)
	#define PROTOTYPES 1
EOF

case $INT_SIZE in
	1)
		cat >> ../include/prototypes.h <<EOF

typedef int int8;
typedef unsigned int u_int8;
EOF
		;;
	2)
		cat >> ../include/prototypes.h <<EOF

typedef int int16;
typedef unsigned int u_int16;
EOF
		;;
	3)
		cat >> ../include/prototypes.h <<EOF

typedef int int24;
typedef unsigned int u_int24;
EOF
		;;
	4)
		cat >> ../include/prototypes.h <<EOF

typedef int int32;
typedef unsigned int u_int32;
EOF
		;;
esac

case $SHORT_SIZE in
	1)
		cat >> ../include/prototypes.h <<EOF

typedef short int8;
typedef unsigned short u_int8;
EOF
		;;
	2)
		cat >> ../include/prototypes.h <<EOF

typedef short int16;
typedef unsigned short u_int16;
EOF
		;;
	3)
		cat >> ../include/prototypes.h <<EOF

typedef short int24;
typedef unsigned short u_int24;
EOF
		;;
	4)
		cat >> ../include/prototypes.h <<EOF

typedef short int32;
typedef unsigned short u_int32;
EOF
		;;
esac

cat >> ../include/prototypes.h <<EOF

#endif
EOF

rm -rf conftest*

echo "$BOLD Working Makefiles$NOR"
SERVER_ROOT=`pwd | sed ' s/\/src//'`
SERVER_BIN="jcd"
cat ../headers/header.sh > modules/Makefile
cat >> modules/Makefile <<EOF
SERVER_ROOT	= ${SERVER_ROOT}
SERVER_BIN	= ${SERVER_BIN}
VERSION		= 0.1.0
BINDIR		= ../bin/
CC		= gcc
PERMS		= 0700
LFLAGS		= -lpthread
CFLAGS		= -O2 -ansi -pedantic -Wall
LFLAGS		= -export-dynamic -ldl
INCLUDE		= -I${SERVER_ROOT}/include/
SRCS		= \$(shell ls *.c)
OBJECTS		= \$(SRCS:.c=.o)

all: \${OBJECTS}

clean:	
	find . -type f -name "*.o" | xargs rm -rf
	find . -type f -name "*.so" | xargs rm -rf
	rm -rf core .depend *~

.c.o:
	\$(CC) \$(CFLAGS) \$(INCLUDE) -c -o \$@ \$<
	ld -soname \$(@:.o=.so) -export-dynamic -shared -o modules/\$(@:.o=.so) \$@
EOF

cat ../headers/header.sh > Makefile
cat >> Makefile <<EOF
SERVER_ROOT	= ${SERVER_ROOT}
SERVER_BIN	= ${SERVER_BIN}
VERSION		= 0.1.0
BINDIR		= ../bin/
CC		= gcc
PERMS		= 0700
LFLAGS		= -lpthread
CFLAGS		= -O2 -ansi -pedantic -Wall
LFLAGS		= -export-dynamic -ldl
INCLUDE		= -I${SERVER_ROOT}/include/
SRCS		= \$(shell ls *.c)
OBJECTS		= \$(SRCS:.c=.o)


all:	deps jcd
	make -C modules

install:
	mv out/jcd ../bin
	chmod \$(PERMS) ../bin/jcd

clean:	
	find . -type f -name "*.o" | xargs rm -rf
	rm -rf ../bin/\$(SERVER_BIN) \$(SERVER_BIN) core .depend *~
	(cd out && rm -rf \$(SERVER_BIN) core .depend *~)
	cat /dev/null > .depend
	make -C modules clean

jcd:	\$(OBJECTS)
	(cd out && \$(CC) \$(CFLAGS) \$(INCLUDE) -o \$(SERVER_BIN) \$(OBJECTS) \$(LFLAGS))

.c.o:
	\$(CC) \$(CFLAGS) \$(INCLUDE) -c -o out/\$@ \$<

deps:	
	@./.create_deps

include .depend
EOF

echo "$BOLD Working Header$NOR"

JCD_VERSION=`cat VERSION`
cat ../headers/header.c > ../include/jcd.h
cat >> ../include/jcd.h <<EOF

#if !defined(__JCD__)
	#define __JCD___ 1

#define JCD_VERSION	"${JCD_VERSION}"
#define SERVER_ROOT	"${SERVER_ROOT}"
#define UNAME_MACHINE	"${UNAME_MACHINE}"
#define UNAME_NODE	"${UNAME_NODE}"
#define UNAME_RELEASE	"${UNAME_RELEASE}"
#define UNAME_OS	"${UNAME_OS}"
#define UNAME_PROCESSOR	"${UNAME_PROCESSOR}"

#define LINUX
#define MALLOC_DEBUG

#endif
EOF

echo "$BOLD Done$NOR"
